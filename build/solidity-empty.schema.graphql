type Account @entity {
	id: ID!
	asOwnable: Ownable
	ownerOf: [Ownable!]! @derivedFrom(field: "owner")
	ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "owner")
	events: [Event!]! @derivedFrom(field: "emitter")
}
type Ownable @entity {
	id: ID!
	asAccount: Account!
	owner: Account!
	ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "contract")
}
type OwnershipTransferred implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Ownable!
	owner: Account!
}
type SupplyOrder @entity {
	id: ID!
	prepPo: String
	loomPo: String
	pelletIds: [Pellet!]! @derivedFrom(field: "soId")
	warpInputs: [WarpInput!]! @derivedFrom(field: "soId")
	sizingInputs: [SizingInput!]! @derivedFrom(field: "soId")
}
type Pellet @entity {
	id: ID!
	materialInfo: String
	materialType: String
	netWeight: String
	grossWeight: String
	coneQuantity: String
	serialNumber: String
	lotNumber: String
	unloadingTimestamp: String
	binNumber: String
	entryTimestamp: String
	entryEmpId: String
	exitTimestamp: String
	exitEmpId: String
	soId: SupplyOrder
}
type WarpInput @entity {
	id: ID!
	soId: SupplyOrder
	creelMachineId: String!
	prepPoId: String!
	loadEmpId: String!
	loadTimestamp: String!
	outputEmpId: String!
	outputTimestamp: String!
	pelletIds: [String!]!
	warperBeamIds: [String!]!
}
type SizingInput @entity {
	id: ID!
	soId: SupplyOrder
	sizingMachineId: String!
	prepPoId: String!
	loadEmpId: String!
	loadTimestamp: String!
	outputEmpId: String!
	outputTimestamp: String!
	warperBeamIds: [String!]!
	weaverBeamIds: [String!]!
}
type SizingStorage @entity {
	id: ID!
	soId: String!
	binId: String!
	empId: String!
	timestamp: String!
	prepPoId: String!
	weaverBeamIds: [String!]!
}
type Loomshed @entity {
	id: ID!
	soId: SupplyOrder
	loomMachineId: String!
	loomPoId: String!
	loadEmpId: String!
	loadTimestamp: String!
	outputEmpId: String!
	outputTimestamp: String!
	weaverBeamIds: [String!]!
	pelletIds: [String!]!
	rollIds: [String!]!
}
interface Event {
	id: ID!
	transaction: Transaction!
	emitter: Account!
	timestamp: BigInt!
}
type Transaction @entity {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}
