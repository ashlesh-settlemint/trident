// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asOwnable(): string | null {
    let value = this.get("asOwnable");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asOwnable(value: string | null) {
    if (!value) {
      this.unset("asOwnable");
    } else {
      this.set("asOwnable", Value.fromString(<string>value));
    }
  }

  get ownerOf(): Array<string> {
    let value = this.get("ownerOf");
    return value!.toStringArray();
  }

  set ownerOf(value: Array<string>) {
    this.set("ownerOf", Value.fromStringArray(value));
  }

  get ownershipTransferred(): Array<string> {
    let value = this.get("ownershipTransferred");
    return value!.toStringArray();
  }

  set ownershipTransferred(value: Array<string>) {
    this.set("ownershipTransferred", Value.fromStringArray(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class Ownable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("asAccount", Value.fromString(""));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ownable entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Ownable entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Ownable", id.toString(), this);
    }
  }

  static load(id: string): Ownable | null {
    return changetype<Ownable | null>(store.get("Ownable", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asAccount(): string {
    let value = this.get("asAccount");
    return value!.toString();
  }

  set asAccount(value: string) {
    this.set("asAccount", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ownershipTransferred(): Array<string> {
    let value = this.get("ownershipTransferred");
    return value!.toStringArray();
  }

  set ownershipTransferred(value: Array<string>) {
    this.set("ownershipTransferred", Value.fromStringArray(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("emitter", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("contract", Value.fromString(""));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OwnershipTransferred entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get emitter(): string {
    let value = this.get("emitter");
    return value!.toString();
  }

  set emitter(value: string) {
    this.set("emitter", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class SupplyOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SupplyOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SupplyOrder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SupplyOrder", id.toString(), this);
    }
  }

  static load(id: string): SupplyOrder | null {
    return changetype<SupplyOrder | null>(store.get("SupplyOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prepPo(): string | null {
    let value = this.get("prepPo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prepPo(value: string | null) {
    if (!value) {
      this.unset("prepPo");
    } else {
      this.set("prepPo", Value.fromString(<string>value));
    }
  }

  get loomPo(): string | null {
    let value = this.get("loomPo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set loomPo(value: string | null) {
    if (!value) {
      this.unset("loomPo");
    } else {
      this.set("loomPo", Value.fromString(<string>value));
    }
  }

  get pelletIds(): Array<string> {
    let value = this.get("pelletIds");
    return value!.toStringArray();
  }

  set pelletIds(value: Array<string>) {
    this.set("pelletIds", Value.fromStringArray(value));
  }

  get warpInputs(): Array<string> {
    let value = this.get("warpInputs");
    return value!.toStringArray();
  }

  set warpInputs(value: Array<string>) {
    this.set("warpInputs", Value.fromStringArray(value));
  }

  get sizingInputs(): Array<string> {
    let value = this.get("sizingInputs");
    return value!.toStringArray();
  }

  set sizingInputs(value: Array<string>) {
    this.set("sizingInputs", Value.fromStringArray(value));
  }
}

export class Pellet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pellet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pellet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pellet", id.toString(), this);
    }
  }

  static load(id: string): Pellet | null {
    return changetype<Pellet | null>(store.get("Pellet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get materialInfo(): string | null {
    let value = this.get("materialInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set materialInfo(value: string | null) {
    if (!value) {
      this.unset("materialInfo");
    } else {
      this.set("materialInfo", Value.fromString(<string>value));
    }
  }

  get materialType(): string | null {
    let value = this.get("materialType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set materialType(value: string | null) {
    if (!value) {
      this.unset("materialType");
    } else {
      this.set("materialType", Value.fromString(<string>value));
    }
  }

  get netWeight(): string | null {
    let value = this.get("netWeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set netWeight(value: string | null) {
    if (!value) {
      this.unset("netWeight");
    } else {
      this.set("netWeight", Value.fromString(<string>value));
    }
  }

  get grossWeight(): string | null {
    let value = this.get("grossWeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set grossWeight(value: string | null) {
    if (!value) {
      this.unset("grossWeight");
    } else {
      this.set("grossWeight", Value.fromString(<string>value));
    }
  }

  get coneQuantity(): string | null {
    let value = this.get("coneQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set coneQuantity(value: string | null) {
    if (!value) {
      this.unset("coneQuantity");
    } else {
      this.set("coneQuantity", Value.fromString(<string>value));
    }
  }

  get serialNumber(): string | null {
    let value = this.get("serialNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set serialNumber(value: string | null) {
    if (!value) {
      this.unset("serialNumber");
    } else {
      this.set("serialNumber", Value.fromString(<string>value));
    }
  }

  get lotNumber(): string | null {
    let value = this.get("lotNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lotNumber(value: string | null) {
    if (!value) {
      this.unset("lotNumber");
    } else {
      this.set("lotNumber", Value.fromString(<string>value));
    }
  }

  get unloadingTimestamp(): string | null {
    let value = this.get("unloadingTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set unloadingTimestamp(value: string | null) {
    if (!value) {
      this.unset("unloadingTimestamp");
    } else {
      this.set("unloadingTimestamp", Value.fromString(<string>value));
    }
  }

  get binNumber(): string | null {
    let value = this.get("binNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set binNumber(value: string | null) {
    if (!value) {
      this.unset("binNumber");
    } else {
      this.set("binNumber", Value.fromString(<string>value));
    }
  }

  get entryTimestamp(): string | null {
    let value = this.get("entryTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set entryTimestamp(value: string | null) {
    if (!value) {
      this.unset("entryTimestamp");
    } else {
      this.set("entryTimestamp", Value.fromString(<string>value));
    }
  }

  get entryEmpId(): string | null {
    let value = this.get("entryEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set entryEmpId(value: string | null) {
    if (!value) {
      this.unset("entryEmpId");
    } else {
      this.set("entryEmpId", Value.fromString(<string>value));
    }
  }

  get exitTimestamp(): string | null {
    let value = this.get("exitTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set exitTimestamp(value: string | null) {
    if (!value) {
      this.unset("exitTimestamp");
    } else {
      this.set("exitTimestamp", Value.fromString(<string>value));
    }
  }

  get exitEmpId(): string | null {
    let value = this.get("exitEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set exitEmpId(value: string | null) {
    if (!value) {
      this.unset("exitEmpId");
    } else {
      this.set("exitEmpId", Value.fromString(<string>value));
    }
  }

  get loomSectionPellet(): boolean {
    let value = this.get("loomSectionPellet");
    return value!.toBoolean();
  }

  set loomSectionPellet(value: boolean) {
    this.set("loomSectionPellet", Value.fromBoolean(value));
  }

  get soId(): string | null {
    let value = this.get("soId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set soId(value: string | null) {
    if (!value) {
      this.unset("soId");
    } else {
      this.set("soId", Value.fromString(<string>value));
    }
  }
}

export class WarpInput extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creelMachineId", Value.fromString(""));
    this.set("prepPoId", Value.fromString(""));
    this.set("loadEmpIds", Value.fromStringArray(new Array(0)));
    this.set("loadTimestamps", Value.fromStringArray(new Array(0)));
    this.set("outputEmpId", Value.fromString(""));
    this.set("outputTimestamp", Value.fromString(""));
    this.set("pelletIds", Value.fromStringArray(new Array(0)));
    this.set("warperBeamIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WarpInput entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WarpInput entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WarpInput", id.toString(), this);
    }
  }

  static load(id: string): WarpInput | null {
    return changetype<WarpInput | null>(store.get("WarpInput", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soId(): string | null {
    let value = this.get("soId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set soId(value: string | null) {
    if (!value) {
      this.unset("soId");
    } else {
      this.set("soId", Value.fromString(<string>value));
    }
  }

  get creelMachineId(): string {
    let value = this.get("creelMachineId");
    return value!.toString();
  }

  set creelMachineId(value: string) {
    this.set("creelMachineId", Value.fromString(value));
  }

  get prepPoId(): string {
    let value = this.get("prepPoId");
    return value!.toString();
  }

  set prepPoId(value: string) {
    this.set("prepPoId", Value.fromString(value));
  }

  get loadEmpIds(): Array<string> {
    let value = this.get("loadEmpIds");
    return value!.toStringArray();
  }

  set loadEmpIds(value: Array<string>) {
    this.set("loadEmpIds", Value.fromStringArray(value));
  }

  get loadTimestamps(): Array<string> {
    let value = this.get("loadTimestamps");
    return value!.toStringArray();
  }

  set loadTimestamps(value: Array<string>) {
    this.set("loadTimestamps", Value.fromStringArray(value));
  }

  get outputEmpId(): string {
    let value = this.get("outputEmpId");
    return value!.toString();
  }

  set outputEmpId(value: string) {
    this.set("outputEmpId", Value.fromString(value));
  }

  get outputTimestamp(): string {
    let value = this.get("outputTimestamp");
    return value!.toString();
  }

  set outputTimestamp(value: string) {
    this.set("outputTimestamp", Value.fromString(value));
  }

  get pelletIds(): Array<string> {
    let value = this.get("pelletIds");
    return value!.toStringArray();
  }

  set pelletIds(value: Array<string>) {
    this.set("pelletIds", Value.fromStringArray(value));
  }

  get warperBeamIds(): Array<string> {
    let value = this.get("warperBeamIds");
    return value!.toStringArray();
  }

  set warperBeamIds(value: Array<string>) {
    this.set("warperBeamIds", Value.fromStringArray(value));
  }
}

export class SizingInput extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sizingMachineId", Value.fromString(""));
    this.set("prepPoId", Value.fromString(""));
    this.set("loadEmpIds", Value.fromStringArray(new Array(0)));
    this.set("loadTimestamps", Value.fromStringArray(new Array(0)));
    this.set("outputEmpId", Value.fromString(""));
    this.set("outputTimestamp", Value.fromString(""));
    this.set("warperBeamIds", Value.fromStringArray(new Array(0)));
    this.set("weaverBeamIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SizingInput entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SizingInput entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SizingInput", id.toString(), this);
    }
  }

  static load(id: string): SizingInput | null {
    return changetype<SizingInput | null>(store.get("SizingInput", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soId(): string | null {
    let value = this.get("soId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set soId(value: string | null) {
    if (!value) {
      this.unset("soId");
    } else {
      this.set("soId", Value.fromString(<string>value));
    }
  }

  get sizingMachineId(): string {
    let value = this.get("sizingMachineId");
    return value!.toString();
  }

  set sizingMachineId(value: string) {
    this.set("sizingMachineId", Value.fromString(value));
  }

  get prepPoId(): string {
    let value = this.get("prepPoId");
    return value!.toString();
  }

  set prepPoId(value: string) {
    this.set("prepPoId", Value.fromString(value));
  }

  get loadEmpIds(): Array<string> {
    let value = this.get("loadEmpIds");
    return value!.toStringArray();
  }

  set loadEmpIds(value: Array<string>) {
    this.set("loadEmpIds", Value.fromStringArray(value));
  }

  get loadTimestamps(): Array<string> {
    let value = this.get("loadTimestamps");
    return value!.toStringArray();
  }

  set loadTimestamps(value: Array<string>) {
    this.set("loadTimestamps", Value.fromStringArray(value));
  }

  get outputEmpId(): string {
    let value = this.get("outputEmpId");
    return value!.toString();
  }

  set outputEmpId(value: string) {
    this.set("outputEmpId", Value.fromString(value));
  }

  get outputTimestamp(): string {
    let value = this.get("outputTimestamp");
    return value!.toString();
  }

  set outputTimestamp(value: string) {
    this.set("outputTimestamp", Value.fromString(value));
  }

  get warperBeamIds(): Array<string> {
    let value = this.get("warperBeamIds");
    return value!.toStringArray();
  }

  set warperBeamIds(value: Array<string>) {
    this.set("warperBeamIds", Value.fromStringArray(value));
  }

  get weaverBeamIds(): Array<string> {
    let value = this.get("weaverBeamIds");
    return value!.toStringArray();
  }

  set weaverBeamIds(value: Array<string>) {
    this.set("weaverBeamIds", Value.fromStringArray(value));
  }
}

export class SizingStorage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("soId", Value.fromString(""));
    this.set("binId", Value.fromString(""));
    this.set("empIds", Value.fromStringArray(new Array(0)));
    this.set("timestamps", Value.fromStringArray(new Array(0)));
    this.set("prepPoId", Value.fromString(""));
    this.set("weaverBeamIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SizingStorage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SizingStorage entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SizingStorage", id.toString(), this);
    }
  }

  static load(id: string): SizingStorage | null {
    return changetype<SizingStorage | null>(store.get("SizingStorage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soId(): string {
    let value = this.get("soId");
    return value!.toString();
  }

  set soId(value: string) {
    this.set("soId", Value.fromString(value));
  }

  get binId(): string {
    let value = this.get("binId");
    return value!.toString();
  }

  set binId(value: string) {
    this.set("binId", Value.fromString(value));
  }

  get empIds(): Array<string> {
    let value = this.get("empIds");
    return value!.toStringArray();
  }

  set empIds(value: Array<string>) {
    this.set("empIds", Value.fromStringArray(value));
  }

  get timestamps(): Array<string> {
    let value = this.get("timestamps");
    return value!.toStringArray();
  }

  set timestamps(value: Array<string>) {
    this.set("timestamps", Value.fromStringArray(value));
  }

  get prepPoId(): string {
    let value = this.get("prepPoId");
    return value!.toString();
  }

  set prepPoId(value: string) {
    this.set("prepPoId", Value.fromString(value));
  }

  get weaverBeamIds(): Array<string> {
    let value = this.get("weaverBeamIds");
    return value!.toStringArray();
  }

  set weaverBeamIds(value: Array<string>) {
    this.set("weaverBeamIds", Value.fromStringArray(value));
  }
}

export class Loomshed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("loomMachineId", Value.fromString(""));
    this.set("loomPoId", Value.fromString(""));
    this.set("loadEmpIds", Value.fromStringArray(new Array(0)));
    this.set("loadTimestamps", Value.fromStringArray(new Array(0)));
    this.set("outputEmpId", Value.fromString(""));
    this.set("outputTimestamp", Value.fromString(""));
    this.set("weaverBeamIds", Value.fromStringArray(new Array(0)));
    this.set("pelletIds", Value.fromStringArray(new Array(0)));
    this.set("rollIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Loomshed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Loomshed entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Loomshed", id.toString(), this);
    }
  }

  static load(id: string): Loomshed | null {
    return changetype<Loomshed | null>(store.get("Loomshed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soId(): string | null {
    let value = this.get("soId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set soId(value: string | null) {
    if (!value) {
      this.unset("soId");
    } else {
      this.set("soId", Value.fromString(<string>value));
    }
  }

  get loomMachineId(): string {
    let value = this.get("loomMachineId");
    return value!.toString();
  }

  set loomMachineId(value: string) {
    this.set("loomMachineId", Value.fromString(value));
  }

  get loomPoId(): string {
    let value = this.get("loomPoId");
    return value!.toString();
  }

  set loomPoId(value: string) {
    this.set("loomPoId", Value.fromString(value));
  }

  get loadEmpIds(): Array<string> {
    let value = this.get("loadEmpIds");
    return value!.toStringArray();
  }

  set loadEmpIds(value: Array<string>) {
    this.set("loadEmpIds", Value.fromStringArray(value));
  }

  get loadTimestamps(): Array<string> {
    let value = this.get("loadTimestamps");
    return value!.toStringArray();
  }

  set loadTimestamps(value: Array<string>) {
    this.set("loadTimestamps", Value.fromStringArray(value));
  }

  get outputEmpId(): string {
    let value = this.get("outputEmpId");
    return value!.toString();
  }

  set outputEmpId(value: string) {
    this.set("outputEmpId", Value.fromString(value));
  }

  get outputTimestamp(): string {
    let value = this.get("outputTimestamp");
    return value!.toString();
  }

  set outputTimestamp(value: string) {
    this.set("outputTimestamp", Value.fromString(value));
  }

  get weaverBeamIds(): Array<string> {
    let value = this.get("weaverBeamIds");
    return value!.toStringArray();
  }

  set weaverBeamIds(value: Array<string>) {
    this.set("weaverBeamIds", Value.fromStringArray(value));
  }

  get pelletIds(): Array<string> {
    let value = this.get("pelletIds");
    return value!.toStringArray();
  }

  set pelletIds(value: Array<string>) {
    this.set("pelletIds", Value.fromStringArray(value));
  }

  get rollIds(): Array<string> {
    let value = this.get("rollIds");
    return value!.toStringArray();
  }

  set rollIds(value: Array<string>) {
    this.set("rollIds", Value.fromStringArray(value));
  }
}

export class Gfi extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("gfiMachineId", Value.fromString(""));
    this.set("loadEmpIds", Value.fromStringArray(new Array(0)));
    this.set("loadTimestamps", Value.fromStringArray(new Array(0)));
    this.set("outputEmpId", Value.fromString(""));
    this.set("outputTimestamp", Value.fromString(""));
    this.set("newRollIds", Value.fromStringArray(new Array(0)));
    this.set("rollIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Gfi entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Gfi entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Gfi", id.toString(), this);
    }
  }

  static load(id: string): Gfi | null {
    return changetype<Gfi | null>(store.get("Gfi", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soId(): string | null {
    let value = this.get("soId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set soId(value: string | null) {
    if (!value) {
      this.unset("soId");
    } else {
      this.set("soId", Value.fromString(<string>value));
    }
  }

  get gfiMachineId(): string {
    let value = this.get("gfiMachineId");
    return value!.toString();
  }

  set gfiMachineId(value: string) {
    this.set("gfiMachineId", Value.fromString(value));
  }

  get loadEmpIds(): Array<string> {
    let value = this.get("loadEmpIds");
    return value!.toStringArray();
  }

  set loadEmpIds(value: Array<string>) {
    this.set("loadEmpIds", Value.fromStringArray(value));
  }

  get loadTimestamps(): Array<string> {
    let value = this.get("loadTimestamps");
    return value!.toStringArray();
  }

  set loadTimestamps(value: Array<string>) {
    this.set("loadTimestamps", Value.fromStringArray(value));
  }

  get outputEmpId(): string {
    let value = this.get("outputEmpId");
    return value!.toString();
  }

  set outputEmpId(value: string) {
    this.set("outputEmpId", Value.fromString(value));
  }

  get outputTimestamp(): string {
    let value = this.get("outputTimestamp");
    return value!.toString();
  }

  set outputTimestamp(value: string) {
    this.set("outputTimestamp", Value.fromString(value));
  }

  get newRollIds(): Array<string> {
    let value = this.get("newRollIds");
    return value!.toStringArray();
  }

  set newRollIds(value: Array<string>) {
    this.set("newRollIds", Value.fromStringArray(value));
  }

  get rollIds(): Array<string> {
    let value = this.get("rollIds");
    return value!.toStringArray();
  }

  set rollIds(value: Array<string>) {
    this.set("rollIds", Value.fromStringArray(value));
  }
}

export class GfiOutput extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("lotId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GfiOutput entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GfiOutput entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GfiOutput", id.toString(), this);
    }
  }

  static load(id: string): GfiOutput | null {
    return changetype<GfiOutput | null>(store.get("GfiOutput", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soId(): string | null {
    let value = this.get("soId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set soId(value: string | null) {
    if (!value) {
      this.unset("soId");
    } else {
      this.set("soId", Value.fromString(<string>value));
    }
  }

  get oldRollId(): string | null {
    let value = this.get("oldRollId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set oldRollId(value: string | null) {
    if (!value) {
      this.unset("oldRollId");
    } else {
      this.set("oldRollId", Value.fromString(<string>value));
    }
  }

  get newRollId(): string | null {
    let value = this.get("newRollId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newRollId(value: string | null) {
    if (!value) {
      this.unset("newRollId");
    } else {
      this.set("newRollId", Value.fromString(<string>value));
    }
  }

  get binId(): string | null {
    let value = this.get("binId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set binId(value: string | null) {
    if (!value) {
      this.unset("binId");
    } else {
      this.set("binId", Value.fromString(<string>value));
    }
  }

  get lotId(): string {
    let value = this.get("lotId");
    return value!.toString();
  }

  set lotId(value: string) {
    this.set("lotId", Value.fromString(value));
  }
}

export class Batching extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("machineId", Value.fromString(""));
    this.set("empId", Value.fromString(""));
    this.set("timestamp", Value.fromString(""));
    this.set("length", Value.fromString(""));
    this.set("aFrame", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Batching entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Batching entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Batching", id.toString(), this);
    }
  }

  static load(id: string): Batching | null {
    return changetype<Batching | null>(store.get("Batching", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gfiOutputIds(): Array<string> {
    let value = this.get("gfiOutputIds");
    return value!.toStringArray();
  }

  set gfiOutputIds(value: Array<string>) {
    this.set("gfiOutputIds", Value.fromStringArray(value));
  }

  get lotId(): string | null {
    let value = this.get("lotId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lotId(value: string | null) {
    if (!value) {
      this.unset("lotId");
    } else {
      this.set("lotId", Value.fromString(<string>value));
    }
  }

  get machineId(): string {
    let value = this.get("machineId");
    return value!.toString();
  }

  set machineId(value: string) {
    this.set("machineId", Value.fromString(value));
  }

  get empId(): string {
    let value = this.get("empId");
    return value!.toString();
  }

  set empId(value: string) {
    this.set("empId", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get length(): string {
    let value = this.get("length");
    return value!.toString();
  }

  set length(value: string) {
    this.set("length", Value.fromString(value));
  }

  get aFrame(): string {
    let value = this.get("aFrame");
    return value!.toString();
  }

  set aFrame(value: string) {
    this.set("aFrame", Value.fromString(value));
  }
}

export class ProcessHouse extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProcessHouse entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProcessHouse entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProcessHouse", id.toString(), this);
    }
  }

  static load(id: string): ProcessHouse | null {
    return changetype<ProcessHouse | null>(store.get("ProcessHouse", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lotId(): string | null {
    let value = this.get("lotId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lotId(value: string | null) {
    if (!value) {
      this.unset("lotId");
    } else {
      this.set("lotId", Value.fromString(<string>value));
    }
  }

  get singingPtrInputMachineId(): string | null {
    let value = this.get("singingPtrInputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrInputMachineId(value: string | null) {
    if (!value) {
      this.unset("singingPtrInputMachineId");
    } else {
      this.set("singingPtrInputMachineId", Value.fromString(<string>value));
    }
  }

  get singingPtrInputAframe(): string | null {
    let value = this.get("singingPtrInputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrInputAframe(value: string | null) {
    if (!value) {
      this.unset("singingPtrInputAframe");
    } else {
      this.set("singingPtrInputAframe", Value.fromString(<string>value));
    }
  }

  get singingPtrInputTimestamp(): string | null {
    let value = this.get("singingPtrInputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrInputTimestamp(value: string | null) {
    if (!value) {
      this.unset("singingPtrInputTimestamp");
    } else {
      this.set("singingPtrInputTimestamp", Value.fromString(<string>value));
    }
  }

  get singingPtrInputEmpId(): string | null {
    let value = this.get("singingPtrInputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrInputEmpId(value: string | null) {
    if (!value) {
      this.unset("singingPtrInputEmpId");
    } else {
      this.set("singingPtrInputEmpId", Value.fromString(<string>value));
    }
  }

  get singingPtrOutputMachineId(): string | null {
    let value = this.get("singingPtrOutputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrOutputMachineId(value: string | null) {
    if (!value) {
      this.unset("singingPtrOutputMachineId");
    } else {
      this.set("singingPtrOutputMachineId", Value.fromString(<string>value));
    }
  }

  get singingPtrOutputAframe(): string | null {
    let value = this.get("singingPtrOutputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrOutputAframe(value: string | null) {
    if (!value) {
      this.unset("singingPtrOutputAframe");
    } else {
      this.set("singingPtrOutputAframe", Value.fromString(<string>value));
    }
  }

  get singingPtrOutputTimestamp(): string | null {
    let value = this.get("singingPtrOutputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrOutputTimestamp(value: string | null) {
    if (!value) {
      this.unset("singingPtrOutputTimestamp");
    } else {
      this.set("singingPtrOutputTimestamp", Value.fromString(<string>value));
    }
  }

  get singingPtrOutputEmpId(): string | null {
    let value = this.get("singingPtrOutputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set singingPtrOutputEmpId(value: string | null) {
    if (!value) {
      this.unset("singingPtrOutputEmpId");
    } else {
      this.set("singingPtrOutputEmpId", Value.fromString(<string>value));
    }
  }

  get mercerizingInputMachineId(): string | null {
    let value = this.get("mercerizingInputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingInputMachineId(value: string | null) {
    if (!value) {
      this.unset("mercerizingInputMachineId");
    } else {
      this.set("mercerizingInputMachineId", Value.fromString(<string>value));
    }
  }

  get mercerizingInputAframe(): string | null {
    let value = this.get("mercerizingInputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingInputAframe(value: string | null) {
    if (!value) {
      this.unset("mercerizingInputAframe");
    } else {
      this.set("mercerizingInputAframe", Value.fromString(<string>value));
    }
  }

  get mercerizingInputTimestamp(): string | null {
    let value = this.get("mercerizingInputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingInputTimestamp(value: string | null) {
    if (!value) {
      this.unset("mercerizingInputTimestamp");
    } else {
      this.set("mercerizingInputTimestamp", Value.fromString(<string>value));
    }
  }

  get mercerizingInputEmpId(): string | null {
    let value = this.get("mercerizingInputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingInputEmpId(value: string | null) {
    if (!value) {
      this.unset("mercerizingInputEmpId");
    } else {
      this.set("mercerizingInputEmpId", Value.fromString(<string>value));
    }
  }

  get mercerizingOutputMachineId(): string | null {
    let value = this.get("mercerizingOutputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingOutputMachineId(value: string | null) {
    if (!value) {
      this.unset("mercerizingOutputMachineId");
    } else {
      this.set("mercerizingOutputMachineId", Value.fromString(<string>value));
    }
  }

  get mercerizingOutputAframe(): string | null {
    let value = this.get("mercerizingOutputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingOutputAframe(value: string | null) {
    if (!value) {
      this.unset("mercerizingOutputAframe");
    } else {
      this.set("mercerizingOutputAframe", Value.fromString(<string>value));
    }
  }

  get mercerizingOutputTimestamp(): string | null {
    let value = this.get("mercerizingOutputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingOutputTimestamp(value: string | null) {
    if (!value) {
      this.unset("mercerizingOutputTimestamp");
    } else {
      this.set("mercerizingOutputTimestamp", Value.fromString(<string>value));
    }
  }

  get mercerizingOutputEmpId(): string | null {
    let value = this.get("mercerizingOutputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mercerizingOutputEmpId(value: string | null) {
    if (!value) {
      this.unset("mercerizingOutputEmpId");
    } else {
      this.set("mercerizingOutputEmpId", Value.fromString(<string>value));
    }
  }

  get dyeingInputMachineId(): string | null {
    let value = this.get("dyeingInputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingInputMachineId(value: string | null) {
    if (!value) {
      this.unset("dyeingInputMachineId");
    } else {
      this.set("dyeingInputMachineId", Value.fromString(<string>value));
    }
  }

  get dyeingInputAframe(): string | null {
    let value = this.get("dyeingInputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingInputAframe(value: string | null) {
    if (!value) {
      this.unset("dyeingInputAframe");
    } else {
      this.set("dyeingInputAframe", Value.fromString(<string>value));
    }
  }

  get dyeingInputTimestamp(): string | null {
    let value = this.get("dyeingInputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingInputTimestamp(value: string | null) {
    if (!value) {
      this.unset("dyeingInputTimestamp");
    } else {
      this.set("dyeingInputTimestamp", Value.fromString(<string>value));
    }
  }

  get dyeingInputEmpId(): string | null {
    let value = this.get("dyeingInputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingInputEmpId(value: string | null) {
    if (!value) {
      this.unset("dyeingInputEmpId");
    } else {
      this.set("dyeingInputEmpId", Value.fromString(<string>value));
    }
  }

  get dyeingOutputMachineId(): string | null {
    let value = this.get("dyeingOutputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingOutputMachineId(value: string | null) {
    if (!value) {
      this.unset("dyeingOutputMachineId");
    } else {
      this.set("dyeingOutputMachineId", Value.fromString(<string>value));
    }
  }

  get dyeingOutputAframe(): string | null {
    let value = this.get("dyeingOutputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingOutputAframe(value: string | null) {
    if (!value) {
      this.unset("dyeingOutputAframe");
    } else {
      this.set("dyeingOutputAframe", Value.fromString(<string>value));
    }
  }

  get dyeingOutputTimestamp(): string | null {
    let value = this.get("dyeingOutputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingOutputTimestamp(value: string | null) {
    if (!value) {
      this.unset("dyeingOutputTimestamp");
    } else {
      this.set("dyeingOutputTimestamp", Value.fromString(<string>value));
    }
  }

  get dyeingOutputEmpId(): string | null {
    let value = this.get("dyeingOutputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dyeingOutputEmpId(value: string | null) {
    if (!value) {
      this.unset("dyeingOutputEmpId");
    } else {
      this.set("dyeingOutputEmpId", Value.fromString(<string>value));
    }
  }

  get printingInputMachineId(): string | null {
    let value = this.get("printingInputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingInputMachineId(value: string | null) {
    if (!value) {
      this.unset("printingInputMachineId");
    } else {
      this.set("printingInputMachineId", Value.fromString(<string>value));
    }
  }

  get printingInputAframe(): string | null {
    let value = this.get("printingInputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingInputAframe(value: string | null) {
    if (!value) {
      this.unset("printingInputAframe");
    } else {
      this.set("printingInputAframe", Value.fromString(<string>value));
    }
  }

  get printingInputTimestamp(): string | null {
    let value = this.get("printingInputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingInputTimestamp(value: string | null) {
    if (!value) {
      this.unset("printingInputTimestamp");
    } else {
      this.set("printingInputTimestamp", Value.fromString(<string>value));
    }
  }

  get printingInputEmpId(): string | null {
    let value = this.get("printingInputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingInputEmpId(value: string | null) {
    if (!value) {
      this.unset("printingInputEmpId");
    } else {
      this.set("printingInputEmpId", Value.fromString(<string>value));
    }
  }

  get printingOutputMachineId(): string | null {
    let value = this.get("printingOutputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingOutputMachineId(value: string | null) {
    if (!value) {
      this.unset("printingOutputMachineId");
    } else {
      this.set("printingOutputMachineId", Value.fromString(<string>value));
    }
  }

  get printingOutputAframe(): string | null {
    let value = this.get("printingOutputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingOutputAframe(value: string | null) {
    if (!value) {
      this.unset("printingOutputAframe");
    } else {
      this.set("printingOutputAframe", Value.fromString(<string>value));
    }
  }

  get printingOutputTimestamp(): string | null {
    let value = this.get("printingOutputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingOutputTimestamp(value: string | null) {
    if (!value) {
      this.unset("printingOutputTimestamp");
    } else {
      this.set("printingOutputTimestamp", Value.fromString(<string>value));
    }
  }

  get printingOutputEmpId(): string | null {
    let value = this.get("printingOutputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set printingOutputEmpId(value: string | null) {
    if (!value) {
      this.unset("printingOutputEmpId");
    } else {
      this.set("printingOutputEmpId", Value.fromString(<string>value));
    }
  }

  get finishedFabricInputMachineId(): string | null {
    let value = this.get("finishedFabricInputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricInputMachineId(value: string | null) {
    if (!value) {
      this.unset("finishedFabricInputMachineId");
    } else {
      this.set("finishedFabricInputMachineId", Value.fromString(<string>value));
    }
  }

  get finishedFabricInputAframe(): string | null {
    let value = this.get("finishedFabricInputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricInputAframe(value: string | null) {
    if (!value) {
      this.unset("finishedFabricInputAframe");
    } else {
      this.set("finishedFabricInputAframe", Value.fromString(<string>value));
    }
  }

  get finishedFabricInputTimestamp(): string | null {
    let value = this.get("finishedFabricInputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricInputTimestamp(value: string | null) {
    if (!value) {
      this.unset("finishedFabricInputTimestamp");
    } else {
      this.set("finishedFabricInputTimestamp", Value.fromString(<string>value));
    }
  }

  get finishedFabricInputEmpId(): string | null {
    let value = this.get("finishedFabricInputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricInputEmpId(value: string | null) {
    if (!value) {
      this.unset("finishedFabricInputEmpId");
    } else {
      this.set("finishedFabricInputEmpId", Value.fromString(<string>value));
    }
  }

  get finishedFabricOutputMachineId(): string | null {
    let value = this.get("finishedFabricOutputMachineId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricOutputMachineId(value: string | null) {
    if (!value) {
      this.unset("finishedFabricOutputMachineId");
    } else {
      this.set(
        "finishedFabricOutputMachineId",
        Value.fromString(<string>value)
      );
    }
  }

  get finishedFabricOutputAframe(): string | null {
    let value = this.get("finishedFabricOutputAframe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricOutputAframe(value: string | null) {
    if (!value) {
      this.unset("finishedFabricOutputAframe");
    } else {
      this.set("finishedFabricOutputAframe", Value.fromString(<string>value));
    }
  }

  get finishedFabricOutputTimestamp(): string | null {
    let value = this.get("finishedFabricOutputTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricOutputTimestamp(value: string | null) {
    if (!value) {
      this.unset("finishedFabricOutputTimestamp");
    } else {
      this.set(
        "finishedFabricOutputTimestamp",
        Value.fromString(<string>value)
      );
    }
  }

  get finishedFabricOutputEmpId(): string | null {
    let value = this.get("finishedFabricOutputEmpId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finishedFabricOutputEmpId(value: string | null) {
    if (!value) {
      this.unset("finishedFabricOutputEmpId");
    } else {
      this.set("finishedFabricOutputEmpId", Value.fromString(<string>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}
