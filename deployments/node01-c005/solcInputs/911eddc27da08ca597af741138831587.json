{
  "language": "Solidity",
  "sources": {
    "contracts/facets/TridentFacet1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// SettleMint.com\n/**\n * Copyright (C) SettleMint NV - All Rights Reserved\n *\n * Use of this file is strictly prohibited without an active license agreement.\n * Distribution of this file, via any medium, is strictly prohibited.\n *\n * For license inquiries, contcontact hello@settlemint.com\n */\npragma solidity ^0.8.9;\n\n// import {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/*\n  WarpingCid - {\n    warperBeamId, employeeId, machineId, warpDate, pelletIds: {GRI => [pelletIds]} (on create)\n    exitPoint, exitTimestamp, leftoverQty (on update)\n  }\n  Note - Frontend application should be able to sort the pellets based on GRI and send in that format\n\n  SizingCid - {\n\n  }\n\n  PelletsCid - [{\n    string status;\n    string exitPoint;\n    uint256 exitTimestamp;\n  },{\n    string status;\n    string exitPoint;\n    uint256 exitTimestamp;\n  }]\n*/\n\ncontract TridentFacet1 {\n  struct SupplyOrder {\n    string soId;\n    string prepPo;\n    string pelletsCid;\n    string warpingCid;\n    string sizingCid;\n    string loomshedCid;\n    string fabricIds;\n  }\n\n  mapping(string => string) private _pettletIdToCid;\n  mapping(string => string) private _pelletExitDetails;\n\n  event AddPelletEvent(string pelletId, string pelletDetailsCid);\n  event ExitPelletEvent(string soId, string pelletId, string pelletExitCid);\n  event LoadPelletEvent(string soId, string pelletId, string creelMachineId, string warpMachineLoadingCid);\n  event WarpingOutputEvent(string warpBeamId, string soId, string creelMachineId, string warpMachineOutputCid);\n  event LoadWarperBeamEvent(string soId, string warperBeamId, string sizingMachineId, string sizingMachineLoadingCid);\n  event SizingOutputEvent(string weaverBeamId, string soId, string sizingMachineId, string sizingMachineOutputCid);\n  event SizingStorageEvent(string binId, string soId, string weaverBeamId, string sizingStorageCid);\n  event IssueNewPelletEvent(string soId, string pelletId);\n  event LoadWeaverBeamEvent(string soId, string weaverBeamId, string pelletId, string loomMachineId, string loomMachineLoadingCid);\n  event LoomOutputEvent(string rollId, string soId, string loomMachineId, string loomMachineOutputCid);\n  event LoadRollEvent(string soId, string rollId, string gfiMachineId, string gfiMachineLoadingCid);\n  event GfiOutputEvent(string newRollId, string soId, string gfiMachineId, string gfiMachineOutputCid);\n  event BatchingEvent(string lotId, string batchingCid);\n\n  event SingingPtrInputEvent(string lotId, string singingPtrInputCid);\n  event MercerizingInputEvent(string lotId, string mercerizingInputCid);\n  event DyeingInputEvent(string lotId, string dyeingInputCid);\n  event PrintingInputEvent(string lotId, string printingInputCid);\n  event FinishedFabricInputEvent(string lotId, string finishedFabricInputCid);\n\n  event SingingPtrOutputEvent(string lotId, string singingPtrOutputCid);\n  event MercerizingOutputEvent(string lotId, string mercerizingOutputCid);\n  event DyeingOutputEvent(string lotId, string dyeingOutputCid);\n  event PrintingOutputEvent(string lotId, string printingOutputCid);\n  event FinishedFabricOutputEvent(string lotId, string finishedFabricOutputCid);\n  event FinishedFabricInspectionEvent(string lotId, string finishedFabricInspectionCid);\n\n  event LinkProcessHousePoEvent(string soId, string processHousePo);\n  event FfiOutputEvent(string ffiRollId, string soId, string ffiOutputCid);\n  event FfiStorageEvent(string ffiRollId, string soId, string imsBinNumber);\n  event CuttingEvent(string ffiRollId, string soId, string newTag, string cuttingCid);\n  event CuttingStorageEvent(string newTag, string soId, string cuttingStorageCid);\n\n  function addPellet(string memory pelletId, string memory pelletDetailsCid) external {\n    _pettletIdToCid[pelletId] = pelletDetailsCid;\n\n    emit AddPelletEvent(pelletId, pelletDetailsCid);\n  }\n\n  function movePelletFromWarehouse(\n    string memory soId,\n    string memory pelletId,\n    string memory pelletExitCid\n  ) external {\n    _pelletExitDetails[pelletId] = pelletExitCid;\n\n    emit ExitPelletEvent(soId, pelletId, pelletExitCid);\n  }\n\n  // Warping section\n\n  function loadPelletToWarpMachine(\n    string memory soId,\n    string memory creelMachineId,\n    string memory pelletId,\n    string memory warpMachineLoadingCid\n  ) external {\n    emit LoadPelletEvent(soId, pelletId, creelMachineId, warpMachineLoadingCid);\n  }\n\n  function addWarpingOutput(\n    string memory warpBeamId,\n    string memory soId,\n    string memory creelMachineId,\n    string memory warpMachineOutputCid\n  ) external {\n    emit WarpingOutputEvent(warpBeamId, soId, creelMachineId, warpMachineOutputCid);\n  }\n\n  function loadBeamToSizingMachine(\n    string memory soId,\n    string memory sizingMachineId,\n    string memory warperBeamId,\n    string memory sizingMachineLoadingCid\n  ) external {\n    emit LoadWarperBeamEvent(soId, warperBeamId, sizingMachineId, sizingMachineLoadingCid);\n  }\n\n  function addSizingOutput(\n    string memory weaverBeamId,\n    string memory soId,\n    string memory sizingMachineId,\n    string memory sizingMachineOutputCid\n  ) external {\n    emit SizingOutputEvent(weaverBeamId, soId, sizingMachineId, sizingMachineOutputCid);\n  }\n\n  function storeWeaverBeams(\n    string memory weaverBeamId,\n    string memory soId,\n    string memory binId,\n    string memory sizingStorageCid\n  ) external {\n    emit SizingStorageEvent(binId, soId, weaverBeamId, sizingStorageCid);\n  }\n\n  function issueNewPellet(string memory soId, string memory pelletId) external {\n    emit IssueNewPelletEvent(soId, pelletId);\n  }\n\n  function loadWeaverBeamToLoomMachine(\n    string memory soId,\n    string memory loomMachineId,\n    string memory weaverBeamId,\n    string memory pelletId,\n    string memory loomMachineLoadingCid\n  ) external {\n    emit LoadWeaverBeamEvent(soId, loomMachineId, weaverBeamId, pelletId, loomMachineLoadingCid);\n  }\n\n  function addLoomshedOutput(\n    string memory rollId,\n    string memory soId,\n    string memory loomMachineId,\n    string memory loomMachineOutputCid\n  ) external {\n    emit LoomOutputEvent(rollId, soId, loomMachineId, loomMachineOutputCid);\n  }\n\n  function loadRollToGfiMachine(\n    string memory soId,\n    string memory rollId,\n    string memory gfiMachineId,\n    string memory gfiMachineLoadingCid\n  ) external {\n    emit LoadRollEvent(soId, rollId, gfiMachineId, gfiMachineLoadingCid);\n  }\n\n  function addGfiOutput(\n    string memory newRollId,\n    string memory soId,\n    string memory gfiMachineId,\n    string memory gfiMachineOutputCid\n  ) external {\n    emit GfiOutputEvent(newRollId, soId, gfiMachineId, gfiMachineOutputCid);\n  }\n\n  function addBatchingDetails(\n    string memory lotId,\n    string memory batchingCid\n  ) external {\n    emit BatchingEvent(lotId, batchingCid);\n  }\n\n  function addSingingPtrInput(\n    string memory lotId,\n    string memory singingPtrInputCid\n  ) external {\n    emit SingingPtrInputEvent(lotId, singingPtrInputCid);\n  }\n\n  function addSingingPtrOutput(\n    string memory lotId,\n    string memory singingPtrOutputCid\n  ) external {\n    emit SingingPtrOutputEvent(lotId, singingPtrOutputCid);\n  }\n\n  function addMercerizingInput(\n    string memory lotId,\n    string memory mercerizingInputCid\n  ) external {\n    emit MercerizingInputEvent(lotId, mercerizingInputCid);\n  }\n\n  function addMercerizingOutput(\n    string memory lotId,\n    string memory mercerizingOutputCid\n  ) external {\n    emit MercerizingOutputEvent(lotId, mercerizingOutputCid);\n  }\n\n  function addDyeingInput(\n    string memory lotId,\n    string memory dyeingInputCid\n  ) external {\n    emit DyeingInputEvent(lotId, dyeingInputCid);\n  }\n\n  function addDyeingOutput(\n    string memory lotId,\n    string memory dyeingOutputCid\n  ) external {\n    emit DyeingOutputEvent(lotId, dyeingOutputCid);\n  }\n\n  function addPrintingInput(\n    string memory lotId,\n    string memory printingInputCid\n  ) external {\n    emit PrintingInputEvent(lotId, printingInputCid);\n  }\n\n  function addPrintingOutput(\n    string memory lotId,\n    string memory printingOutputCid\n  ) external {\n    emit PrintingOutputEvent(lotId, printingOutputCid);\n  }\n\n  function addFinishedFabricInput(\n    string memory lotId,\n    string memory finishedFabricInputCid\n  ) external {\n    emit FinishedFabricInputEvent(lotId, finishedFabricInputCid);\n  }\n\n  function addFinishedFabricOutput(\n    string memory lotId,\n    string memory finishedFabricOutputCid\n  ) external {\n    emit FinishedFabricOutputEvent(lotId, finishedFabricOutputCid);\n  }\n\n  function addFinishedFabricInspection(\n    string memory lotId,\n    string memory finishedFabricInspectionCid\n  ) external {\n    emit FinishedFabricInspectionEvent(lotId, finishedFabricInspectionCid);\n  }\n\n  function linkProcessHousePo(string memory soId, string memory processHousePo) external {\n    emit LinkProcessHousePoEvent(soId, processHousePo);\n  }\n\n  function addFfiOutput(\n    string memory ffiRollId,\n    string memory soId,\n    string memory ffiOutputCid\n  ) external {\n    emit FfiOutputEvent(ffiRollId, soId, ffiOutputCid);\n  }\n\n  function addFfiStorage(\n    string memory ffiRollId,\n    string memory soId,\n    string memory imsBinNumber\n  ) external {\n    emit FfiStorageEvent(ffiRollId, soId, imsBinNumber);\n  }\n\n  function addCuttingDetails(\n    string memory ffiRollId,\n    string memory soId,\n    string memory newTag,\n    string memory cuttingCid\n  ) external {\n    emit CuttingEvent(ffiRollId, soId, newTag, cuttingCid);\n  }\n\n  function addCuttingStorage(\n    string memory newTag,\n    string memory soId,\n    string memory cuttingStorageCid\n  ) external {\n    emit CuttingStorageEvent(newTag, soId, cuttingStorageCid);\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}